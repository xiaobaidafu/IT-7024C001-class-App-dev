using System.Text;
//debug using ChatGPT
namespace DailyWellnessApp1;


//partial class: Indicates that this class has another "half" in the code generated by XAML (a partial class with the same name).
public partial class RecommendationsPage : ContentPage
{
    private readonly WellnessResult _result;

    public RecommendationsPage(WellnessResult result)
    {
        InitializeComponent();
        _result = result;// data from lasr session
    }

    protected override void OnAppearing()
    {
        base.OnAppearing();//OnAppearing(): Triggered every time the page is displayed
        HeaderLabel.Text = $"{_result.Gender} • {_result.Status}";// gender and result
        BodyLabel.Text = BuildRecommendations(_result.Status, _result.Gender);//recommand
    }
    
    static string BuildRecommendations(string status, Gender gender)
    {
        bool male = gender == Gender.Male;// bool for male flase = female
        //? male
        //: female
        return status switch
        {
            "Excellent" => male
                ? "• Maintain routine; include resistance training 2–3×/week; ensure protein intake across meals."
                : "• Keep strong habits; add yoga/pilates for recovery; prioritize calcium + vitamin D intake.",
            "Good" => male
                ? "• Earlier bedtime for recovery; add 15 min light cardio/stretching; maintain hydration."
                : "• Balanced breakfast; add 15 min walking; focus on iron-rich foods if feeling low.",
            "Fair" => male
                ? "• Aim for +1 hour sleep; reduce caffeine after noon; schedule light mobility/easy walk."
                : "• Improve sleep consistency; reduce evening screen time; add calming routines (meditation/journaling).",
            _ => male
                ? "• Rest today; avoid strenuous workouts; hydrate and take 20–30 min gentle walk."
                : "• Prioritize rest/self-care; short nap if possible; gentle yoga/stretching only."
        };
    }
    //return to result
    async void OnBackToResultsClicked(object? sender, EventArgs e)
    {
        await Navigation.PopAsync(); // Page3 → Page2
    }
    // return to first session
    async void OnBackToInputsClicked(object? sender, EventArgs e)
    {
        await Navigation.PopToRootAsync(animated: true);
    }
}
